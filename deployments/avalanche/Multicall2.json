{
  "address": "0xAbeC56f92a89eEe33F5194Ca4151DD59785c2C74",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa240419d0d05bbf7f454ab09a4cb13384c3bdd10ae34c894b9a84ddfe281119d",
  "receipt": {
    "to": null,
    "from": "0x5aC255889882aCd3da2aA939679E3f3d4cea221e",
    "contractAddress": "0xAbeC56f92a89eEe33F5194Ca4151DD59785c2C74",
    "transactionIndex": 1,
    "gasUsed": "684035",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9be322a46b22b9ab1fc9fb24bb8e3d9e85b45bb193eea3316e196ac1b79351e3",
    "transactionHash": "0xa240419d0d05bbf7f454ab09a4cb13384c3bdd10ae34c894b9a84ddfe281119d",
    "logs": [],
    "blockNumber": 7326216,
    "cumulativeGasUsed": "713005",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "742c4b047429901edc0baf62e1d1f7f6",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\"},\"userdoc\":{\"methods\":{},\"notice\":\"Based on https://github.com/makerdao/multicall/blob/master/src/Multicall2.sol\"}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// Based on https://github.com/makerdao/multicall/blob/master/src/Multicall2.sol\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            uint256 size;\\n            address callerTarget = calls[i].target;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly { size := extcodesize(callerTarget) }\\n            if (size > 0) {\\n                (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n                require(success, \\\"Multicall2: Error in call\\\");\\n                returnData[i] = ret;\\n            } else {\\n                require(false, \\\"Multicall2: inexisting target\\\");\\n            }\\n        }\\n    }\\n    // Helper functions\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            uint256 size;\\n            bool success;\\n            bytes memory ret;\\n            address callerTarget = calls[i].target;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly { size := extcodesize(callerTarget) }\\n            if (size > 0) {\\n                (success, ret) = callerTarget.call(calls[i].callData);\\n            } else {\\n                success = false;\\n            }\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2: call failed\\\");\\n            }\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdafc63a1b8169f5e74359095d520eca4c4597a049a8163a6e2b4e86bbc0048c2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b6b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d1461013d57806386d516e814610145578063a8b0574e1461014d578063bce38bd714610162578063c3077fa914610182578063ee82ac5e14610195576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e146100f8578063399542e91461010057806342cbb15c146101225780634d2301cc1461012a575b600080fd5b6100c16101a8565b6040516100ce9190610987565b60405180910390f35b6100ea6100e5366004610661565b6101ac565b6040516100ce9291906109c5565b6100c161031f565b61011361010e366004610696565b610328565b6040516100ce939291906109e5565b6100c1610340565b6100c161013836600461063b565b610344565b6100c1610351565b6100c1610355565b610155610359565b6040516100ce9190610968565b610175610170366004610696565b61035d565b6040516100ce9190610976565b610113610190366004610661565b6104c1565b6100c16101a33660046106e8565b6104de565b4290565b6000606043915082516040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156103195760008085838151811061020657fe5b6020026020010151600001519050803b915060008211156102f7576000606087858151811061023157fe5b6020026020010151600001516001600160a01b031688868151811061025257fe5b60200260200101516020015160405161026b919061095c565b6000604051808303816000865af19150503d80600081146102a8576040519150601f19603f3d011682016040523d82523d6000602084013e6102ad565b606091505b5091509150816102d85760405162461bcd60e51b81526004016102cf906109b5565b60405180910390fd5b808686815181106102e557fe5b6020026020010181905250505061030f565b60405162461bcd60e51b81526004016102cf90610995565b50506001016101ee565b50915091565b60001943014090565b4380406060610337858561035d565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815160405190808252806020026020018201604052801561039a57816020015b6103876104e2565b81526020019060019003908161037f5790505b50905060005b82518110156104ba57600080606060008685815181106103bc57fe5b6020026020010151600001519050803b9350600084111561045357806001600160a01b03168786815181106103ed57fe5b602002602001015160200151604051610406919061095c565b6000604051808303816000865af19150503d8060008114610443576040519150601f19603f3d011682016040523d82523d6000602084013e610448565b606091505b509093509150610458565b600092505b871561047b578261047b5760405162461bcd60e51b81526004016102cf906109a5565b604051806040016040528084151581526020018381525086868151811061049e57fe5b60200260200101819052505050505080806001019150506103a0565b5092915050565b60008060606104d1600185610328565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803561050581610aff565b92915050565b600082601f83011261051c57600080fd5b813561052f61052a82610a39565b610a12565b81815260209384019390925082018360005b8381101561056d578135860161055788826105d1565b8452506020928301929190910190600101610541565b5050505092915050565b803561050581610b16565b600082601f83011261059357600080fd5b81356105a161052a82610a5a565b915080825260208301602083018583830111156105bd57600080fd5b6105c8838284610ab9565b50505092915050565b6000604082840312156105e357600080fd5b6105ed6040610a12565b905060006105fb84846104fa565b825250602082013567ffffffffffffffff81111561061857600080fd5b61062484828501610582565b60208301525092915050565b803561050581610b1f565b60006020828403121561064d57600080fd5b600061065984846104fa565b949350505050565b60006020828403121561067357600080fd5b813567ffffffffffffffff81111561068a57600080fd5b6106598482850161050b565b600080604083850312156106a957600080fd5b60006106b58585610577565b925050602083013567ffffffffffffffff8111156106d257600080fd5b6106de8582860161050b565b9150509250929050565b6000602082840312156106fa57600080fd5b60006106598484610630565b60006107128383610815565b9392505050565b60006107128383610927565b61072e81610a9a565b82525050565b600061073f82610a88565b6107498185610a8c565b93508360208202850161075b85610a82565b8060005b8581101561079557848403895281516107788582610706565b945061078383610a82565b60209a909a019992505060010161075f565b5091979650505050505050565b60006107ad82610a88565b6107b78185610a8c565b9350836020820285016107c985610a82565b8060005b8581101561079557848403895281516107e68582610719565b94506107f183610a82565b60209a909a01999250506001016107cd565b61072e81610aa5565b61072e81610aaa565b600061082082610a88565b61082a8185610a8c565b935061083a818560208601610ac5565b61084381610af5565b9093019392505050565b600061085882610a88565b6108628185610a95565b9350610872818560208601610ac5565b9290920192915050565b6000610889601d83610a8c565b7f4d756c746963616c6c323a20696e6578697374696e6720746172676574000000815260200192915050565b60006108c2601783610a8c565b7f4d756c746963616c6c323a2063616c6c206661696c6564000000000000000000815260200192915050565b60006108fb601983610a8c565b7f4d756c746963616c6c323a204572726f7220696e2063616c6c00000000000000815260200192915050565b8051600090604084019061093b8582610803565b50602083015184820360208601526109538282610815565b95945050505050565b6000610712828461084d565b602081016105058284610725565b6020808252810161071281846107a2565b60208101610505828461080c565b602080825281016105058161087c565b60208082528101610505816108b5565b60208082528101610505816108ee565b604081016109d3828561080c565b81810360208301526106598184610734565b606081016109f3828661080c565b610a00602083018561080c565b818103604083015261095381846107a2565b60405181810167ffffffffffffffff81118282101715610a3157600080fd5b604052919050565b600067ffffffffffffffff821115610a5057600080fd5b5060209081020190565b600067ffffffffffffffff821115610a7157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061050582610aad565b151590565b90565b6001600160a01b031690565b82818337506000910152565b60005b83811015610ae0578181015183820152602001610ac8565b83811115610aef576000848401525b50505050565b601f01601f191690565b610b0881610a9a565b8114610b1357600080fd5b50565b610b0881610aa5565b610b0881610aaa56fea365627a7a72315820c6be4a05b5c2e501bb2df36579f24250d976089ae2869d97ca8f9e68d28c20bf6c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d1461013d57806386d516e814610145578063a8b0574e1461014d578063bce38bd714610162578063c3077fa914610182578063ee82ac5e14610195576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e146100f8578063399542e91461010057806342cbb15c146101225780634d2301cc1461012a575b600080fd5b6100c16101a8565b6040516100ce9190610987565b60405180910390f35b6100ea6100e5366004610661565b6101ac565b6040516100ce9291906109c5565b6100c161031f565b61011361010e366004610696565b610328565b6040516100ce939291906109e5565b6100c1610340565b6100c161013836600461063b565b610344565b6100c1610351565b6100c1610355565b610155610359565b6040516100ce9190610968565b610175610170366004610696565b61035d565b6040516100ce9190610976565b610113610190366004610661565b6104c1565b6100c16101a33660046106e8565b6104de565b4290565b6000606043915082516040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156103195760008085838151811061020657fe5b6020026020010151600001519050803b915060008211156102f7576000606087858151811061023157fe5b6020026020010151600001516001600160a01b031688868151811061025257fe5b60200260200101516020015160405161026b919061095c565b6000604051808303816000865af19150503d80600081146102a8576040519150601f19603f3d011682016040523d82523d6000602084013e6102ad565b606091505b5091509150816102d85760405162461bcd60e51b81526004016102cf906109b5565b60405180910390fd5b808686815181106102e557fe5b6020026020010181905250505061030f565b60405162461bcd60e51b81526004016102cf90610995565b50506001016101ee565b50915091565b60001943014090565b4380406060610337858561035d565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815160405190808252806020026020018201604052801561039a57816020015b6103876104e2565b81526020019060019003908161037f5790505b50905060005b82518110156104ba57600080606060008685815181106103bc57fe5b6020026020010151600001519050803b9350600084111561045357806001600160a01b03168786815181106103ed57fe5b602002602001015160200151604051610406919061095c565b6000604051808303816000865af19150503d8060008114610443576040519150601f19603f3d011682016040523d82523d6000602084013e610448565b606091505b509093509150610458565b600092505b871561047b578261047b5760405162461bcd60e51b81526004016102cf906109a5565b604051806040016040528084151581526020018381525086868151811061049e57fe5b60200260200101819052505050505080806001019150506103a0565b5092915050565b60008060606104d1600185610328565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803561050581610aff565b92915050565b600082601f83011261051c57600080fd5b813561052f61052a82610a39565b610a12565b81815260209384019390925082018360005b8381101561056d578135860161055788826105d1565b8452506020928301929190910190600101610541565b5050505092915050565b803561050581610b16565b600082601f83011261059357600080fd5b81356105a161052a82610a5a565b915080825260208301602083018583830111156105bd57600080fd5b6105c8838284610ab9565b50505092915050565b6000604082840312156105e357600080fd5b6105ed6040610a12565b905060006105fb84846104fa565b825250602082013567ffffffffffffffff81111561061857600080fd5b61062484828501610582565b60208301525092915050565b803561050581610b1f565b60006020828403121561064d57600080fd5b600061065984846104fa565b949350505050565b60006020828403121561067357600080fd5b813567ffffffffffffffff81111561068a57600080fd5b6106598482850161050b565b600080604083850312156106a957600080fd5b60006106b58585610577565b925050602083013567ffffffffffffffff8111156106d257600080fd5b6106de8582860161050b565b9150509250929050565b6000602082840312156106fa57600080fd5b60006106598484610630565b60006107128383610815565b9392505050565b60006107128383610927565b61072e81610a9a565b82525050565b600061073f82610a88565b6107498185610a8c565b93508360208202850161075b85610a82565b8060005b8581101561079557848403895281516107788582610706565b945061078383610a82565b60209a909a019992505060010161075f565b5091979650505050505050565b60006107ad82610a88565b6107b78185610a8c565b9350836020820285016107c985610a82565b8060005b8581101561079557848403895281516107e68582610719565b94506107f183610a82565b60209a909a01999250506001016107cd565b61072e81610aa5565b61072e81610aaa565b600061082082610a88565b61082a8185610a8c565b935061083a818560208601610ac5565b61084381610af5565b9093019392505050565b600061085882610a88565b6108628185610a95565b9350610872818560208601610ac5565b9290920192915050565b6000610889601d83610a8c565b7f4d756c746963616c6c323a20696e6578697374696e6720746172676574000000815260200192915050565b60006108c2601783610a8c565b7f4d756c746963616c6c323a2063616c6c206661696c6564000000000000000000815260200192915050565b60006108fb601983610a8c565b7f4d756c746963616c6c323a204572726f7220696e2063616c6c00000000000000815260200192915050565b8051600090604084019061093b8582610803565b50602083015184820360208601526109538282610815565b95945050505050565b6000610712828461084d565b602081016105058284610725565b6020808252810161071281846107a2565b60208101610505828461080c565b602080825281016105058161087c565b60208082528101610505816108b5565b60208082528101610505816108ee565b604081016109d3828561080c565b81810360208301526106598184610734565b606081016109f3828661080c565b610a00602083018561080c565b818103604083015261095381846107a2565b60405181810167ffffffffffffffff81118282101715610a3157600080fd5b604052919050565b600067ffffffffffffffff821115610a5057600080fd5b5060209081020190565b600067ffffffffffffffff821115610a7157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061050582610aad565b151590565b90565b6001600160a01b031690565b82818337506000910152565b60005b83811015610ae0578181015183820152602001610ac8565b83811115610aef576000848401525b50505050565b601f01601f191690565b610b0881610a9a565b8114610b1357600080fd5b50565b610b0881610aa5565b610b0881610aaa56fea365627a7a72315820c6be4a05b5c2e501bb2df36579f24250d976089ae2869d97ca8f9e68d28c20bf6c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls"
  },
  "userdoc": {
    "methods": {},
    "notice": "Based on https://github.com/makerdao/multicall/blob/master/src/Multicall2.sol"
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}